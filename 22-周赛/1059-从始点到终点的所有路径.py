from typing import List


# 这道题我的解答有错，请注意

# 思路：进行一次拓扑排序，根据拓扑排序的结果就可以回答本题
# 1、拓扑排序可以帮助我们判断有向无环图是否存在环
# 2、判断拓扑排序的起点和终点是不是 source 和 destination

# 参考资料：https://blog.csdn.net/qq_33321609/article/details/91045935

class Solution:
    def leadsToDestination(self, n: int, edges: List[List[int]], source: int, destination: int) -> bool:
        elen = len(edges)
        # 特判
        if n == 1 and elen == 0:
            return True
        if n < 2 or elen < 1:
            return False
        # 步骤1：统计每个顶点的入度
        # 入度数组，记录了指向它的结点的个数，一开始全部为 0
        in_degrees = [0 for _ in range(n)]
        # 邻接表，使用散列表是为了去重
        adj = [set() for _ in range(n)]

        for first, second in edges:
            # 根据入度数组的定义，被指向的结点的入度 + 1
            in_degrees[second] += 1
            adj[first].add(second)
        # print(in_degrees)
        # print('起点的出度', len(adj[source]))
        # print('终点的入度', in_degrees[destination])
        # print('elen', elen)

        queue = []
        for i in range(n):
            if in_degrees[i] == 0:
                queue.append(i)

        if source not in queue:
            return False

        if len(adj[source]) != in_degrees[destination]:
            return False

        # if elen % len(adj[source]) != 0:
        #     return False

        # 步骤2：拓扑排序开始之前，先把所有入度为 0 的结点加入到一个队列中
        # 首先遍历一遍，把所有入度为 0 的结点都加入队列

        # print('queue',queue)
        # 拓扑排序的结果
        res = []

        while queue:
            top = queue.pop(0)
            res.append(top)
            # 步骤3：把这个结点的所有后继结点的入度减去 1，如果发现入度为 0 ，就马上添加到队列中
            for successor in adj[top]:
                in_degrees[successor] -= 1
                if in_degrees[successor] == 0:
                    queue.append(successor)
        # print(res)
        #
        # print(len(res) != n)
        # print('res[0] != source',res[0] != source)
        # print('res[-1] != destination', res[0] != source)
        if len(res) != n or (res[0] != source or res[-1] != destination):
            return False
        return True


if __name__ == '__main__':
    # n = 4
    # edges = [[0, 1], [0, 2], [1, 3], [2, 3],[1,2]]
    # source = 0
    # destination = 3

    # n = 3
    # edges = [[0, 1], [0, 2]]
    # source = 0
    # destination = 2

    # n = 100
    # edges = [[98, 0], [0, 99], [98, 1], [1, 99], [98, 2], [2, 99], [98, 3], [3, 99], [98, 4], [4, 99], [98, 5], [5, 99],
    #          [98, 6], [6, 99], [98, 7], [7, 99], [98, 8], [8, 99], [98, 9], [9, 99], [98, 10], [10, 99], [98, 11],
    #          [11, 99],
    #          [98, 12], [12, 99], [98, 13], [13, 99], [98, 14], [14, 99], [98, 15], [15, 99], [98, 16], [16, 99],
    #          [98, 17],
    #          [17, 99], [98, 18], [18, 99], [98, 19], [19, 99], [98, 20], [20, 99], [98, 21], [21, 99], [98, 22],
    #          [22, 99],
    #          [98, 23], [23, 99], [98, 24], [24, 99], [98, 25], [25, 99], [98, 26], [26, 99], [98, 27], [27, 99],
    #          [98, 28],
    #          [28, 99], [98, 29], [29, 99], [98, 30], [30, 99], [98, 31], [31, 99], [98, 32], [32, 99], [98, 33],
    #          [33, 99],
    #          [98, 34], [34, 99], [98, 35], [35, 99], [98, 36], [36, 99], [98, 37], [37, 99], [98, 38], [38, 99],
    #          [98, 39],
    #          [39, 99], [98, 40], [40, 99], [98, 41], [41, 99], [98, 42], [42, 99], [98, 43], [43, 99], [98, 44],
    #          [44, 99],
    #          [98, 45], [45, 99], [98, 46], [46, 99], [98, 47], [47, 99], [98, 48], [48, 99], [98, 49], [49, 99],
    #          [98, 50],
    #          [50, 99], [98, 51], [51, 99], [98, 52], [52, 99], [98, 53], [53, 99], [98, 54], [54, 99], [98, 55],
    #          [55, 99],
    #          [98, 56], [56, 99], [98, 57], [57, 99], [98, 58], [58, 99], [98, 59], [59, 99], [98, 60], [60, 99],
    #          [98, 61],
    #          [61, 99], [98, 62], [62, 99], [98, 63], [63, 99], [98, 64], [64, 99], [98, 65], [65, 99], [98, 66],
    #          [66, 99],
    #          [98, 67], [67, 99], [98, 68], [68, 99], [98, 69], [69, 99], [98, 70], [70, 99], [98, 71], [71, 99],
    #          [98, 72],
    #          [72, 99], [98, 73], [73, 99], [98, 74], [74, 99], [98, 75], [75, 99], [98, 76], [76, 99], [98, 77],
    #          [77, 99],
    #          [98, 78], [78, 99], [98, 79], [79, 99], [98, 80], [80, 99], [98, 81], [81, 99], [98, 82], [82, 99],
    #          [98, 83],
    #          [83, 99], [98, 84], [84, 99], [98, 85], [85, 99], [98, 86], [86, 99], [98, 87], [87, 99], [98, 88],
    #          [88, 99],
    #          [98, 89], [89, 99], [98, 90], [90, 99], [98, 91], [91, 99], [98, 92], [92, 99], [98, 93], [93, 99],
    #          [98, 94],
    #          [94, 99], [98, 95], [95, 99], [98, 96], [96, 99], [98, 97], [97, 99]]
    # source = 98
    # destination = 99

    n = 7
    edges = [[0, 1], [0, 2], [1, 3], [2, 4], [3, 5], [4, 5], [2, 6]]
    source = 0
    destination = 5

    # n = 2
    # edges = [[1, 0]]
    # source = 0
    # destination = 1

    solution = Solution()
    res = solution.leadsToDestination(n, edges, source, destination)
    print(res)
